SELECT 
 MIN(VeryActiveMinutes) as veryactivemin_min, 
 MIN(FairlyActiveMinutes) as fairlyactivemin_min,
 MIN(LightlyActiveMinutes) as lightactivemin_min,
 MIN(SedentaryMinutes) as sedentarymin_min,
 MAX(VeryActiveMinutes) as veryactivemin_max,
 MAX(FairlyActiveMinutes) as fairlyactivemin_max,
 MAX(LightlyActiveMinutes) as lightactivemin_max,
 MAX(SedentaryMinutes) as sedentarymin_max,
 AVG(VeryActiveMinutes) as veryactivemin_avg,
 AVG(FairlyActiveMinutes) as fairlyactivemin_avg,
 AVG(LightlyActiveMinutes) as lightactivemin_avg,
 AVG(SedentaryMinutes) as sedentarymin_avg
FROM 
 data-analysis-portfolio-407018.FitBit_Dataset.DailyActivity


-- Join tables which have day level
SELECT
 A.Id,
 A.Calories,
 * EXCEPT(Id,
   Calories,
   ActivityDay,
   SleepDay,
   SedentaryMinutes,
   LightlyActiveMinutes,
   FairlyActiveMinutes,
   VeryActiveMinutes,
   SedentaryActiveDistance,
   LightActiveDistance,
   ModeratelyActiveDistance,
   VeryActiveDistance),
 I.SedentaryMinutes,
 I.LightlyActiveMinutes,
 I.FairlyActiveMinutes,
 I.VeryActiveMinutes,
 I.SedentaryActiveDistance,
 I.LightActiveDistance,
 I.ModeratelyActiveDistance,
 I.VeryActiveDistance
FROM
 `data-analysis-portfolio-407018.FitBit_Dataset.DailyActivity` A
LEFT JOIN
 `data-analysis-portfolio-407018.FitBit_Dataset.DailyCalories` C
ON
 A.Id = C.Id
 AND A.ActivityDate=C.ActivityDay
 AND A.Calories = C.Calories
LEFT JOIN
 `data-analysis-portfolio-407018.FitBit_Dataset.DailyIntensities` I
ON
 A.Id = I.Id
 AND A.ActivityDate=I.ActivityDay
 AND A.FairlyActiveMinutes = I.FairlyActiveMinutes
 AND A.LightActiveDistance = I.LightActiveDistance
 AND A.LightlyActiveMinutes = I.LightlyActiveMinutes
 AND A.ModeratelyActiveDistance = I.ModeratelyActiveDistance
 AND A.SedentaryActiveDistance = I.SedentaryActiveDistance
 AND A.SedentaryMinutes = I.SedentaryMinutes
 AND A.VeryActiveDistance = I.VeryActiveDistance
 AND A.VeryActiveMinutes = I.VeryActiveMinutes
LEFT JOIN
 `data-analysis-portfolio-407018.FitBit_Dataset.DailySteps` S
ON
 A.Id = S.Id
 AND A.ActivityDate=S.ActivityDay
LEFT JOIN
 `data-analysis-portfolio-407018.FitBit_Dataset.SleepDay` Sl
ON
 A.Id = Sl.Id
 AND A.ActivityDate=Sl.SleepDay;

-- Sleep related product could be a possibility -> check to see if/how people sleep during the day
-- Assuming a nap is any time someone goes to sleep and wakes up in the same day
SELECT
 Id,
 sleep_start AS sleep_date,
 COUNT(logId) AS number_naps,
 time_sleeping
FROM (
 SELECT
   Id,
   logId,
   MIN(date) AS sleep_start,
   MAX(date) AS sleep_end,
   TIME_DIFF(MAX(time), MIN(time), HOUR) AS time_sleeping
 FROM (
   SELECT
   *,
   PARSE_TIME('%H:%M:%S', LEFT(Hour,7)) AS time
   FROM
    `data-analysis-portfolio-407018.FitBit_Dataset.MinuteSleep`
 ) 
 WHERE
   value=1
 GROUP BY
   1,
   2)
WHERE
 sleep_start=sleep_end
GROUP BY
 1,
 2,
 4
ORDER BY
 3 DESC;

-- Do an analysis based on time of the day and day of the week
-- Smooth over anomalous days
WITH
 user_dow_summary AS (
 SELECT
   Id,
   FORMAT_TIMESTAMP("%w", ActivityDay) AS dow_number,
   FORMAT_TIMESTAMP("%A", ActivityDay) AS day_of_week,
   CASE
     WHEN FORMAT_TIMESTAMP("%A", ActivityDay) IN ("Sunday", "Saturday") THEN "Weekend"
     WHEN FORMAT_TIMESTAMP("%A", ActivityDay) NOT IN ("Sunday",
     "Saturday") THEN "Weekday"
   ELSE
   "ERROR"
 END
   AS part_of_week,
   CASE
     WHEN TIME(PARSE_TIMESTAMP('%I:%M:%S %p', ActivityHour)) BETWEEN TIME(MORNING_START, 0, 0) AND TIME(MORNING_END, 0, 0) THEN "Morning"
     WHEN TIME(PARSE_TIMESTAMP('%I:%M:%S %p', ActivityHour)) BETWEEN TIME(MORNING_END,
     0,
     0)
   AND TIME(AFTERNOON_END,
     0,
     0) THEN "Afternoon"
     WHEN TIME(PARSE_TIMESTAMP('%I:%M:%S %p', ActivityHour)) BETWEEN TIME(AFTERNOON_END, 0, 0) AND TIME(EVENING_END, 0, 0) THEN "Evening"
     WHEN TIME(PARSE_TIMESTAMP('%I:%M:%S %p', ActivityHour)) >= TIME(EVENING_END,
     0,
     0)
   OR TIME(TIMESTAMP_TRUNC(PARSE_TIMESTAMP('%I:%M:%S %p', ActivityHour), MINUTE)) <= TIME(MORNING_START,
     0,
     0) THEN "Night"
   ELSE
   "ERROR"
 END
   AS time_of_day,
   SUM(TotalIntensity) AS total_intensity,
   SUM(AverageIntensity) AS total_average_intensity,
   AVG(AverageIntensity) AS average_intensity,
   MAX(AverageIntensity) AS max_intensity,
   MIN(AverageIntensity) AS min_intensity
 FROM
   `data-analysis-portfolio-407018.FitBit_Dataset.HourlyIntensities`
 GROUP BY
   1,
   2,
   3,
   4,
   5),
 intensity_deciles AS (
 SELECT
   DISTINCT dow_number,
   part_of_week,
   day_of_week,
   time_of_day,
   ROUND(PERCENTILE_CONT(total_intensity,
       0.1) OVER (PARTITION BY dow_number, part_of_week, day_of_week, time_of_day),4) AS total_intensity_first_decile,
   ROUND(PERCENTILE_CONT(total_intensity,
       0.2) OVER (PARTITION BY dow_number, part_of_week, day_of_week, time_of_day),4) AS total_intensity_second_decile,
   ROUND(PERCENTILE_CONT(total_intensity,
       0.3) OVER (PARTITION BY dow_number, part_of_week, day_of_week, time_of_day),4) AS total_intensity_third_decile,
   ROUND(PERCENTILE_CONT(total_intensity,
       0.4) OVER (PARTITION BY dow_number, part_of_week, day_of_week, time_of_day),4) AS total_intensity_fourth_decile,
   ROUND(PERCENTILE_CONT(total_intensity,
       0.6) OVER (PARTITION BY dow_number, part_of_week, day_of_week, time_of_day),4) AS total_intensity_sixth_decile,
   ROUND(PERCENTILE_CONT(total_intensity,
       0.7) OVER (PARTITION BY dow_number, part_of_week, day_of_week, time_of_day),4) AS total_intensity_seventh_decile,
   ROUND(PERCENTILE_CONT(total_intensity,
       0.8) OVER (PARTITION BY dow_number, part_of_week, day_of_week, time_of_day),4) AS total_intensity_eigth_decile,
   ROUND(PERCENTILE_CONT(total_intensity,
       0.9) OVER (PARTITION BY dow_number, part_of_week, day_of_week, time_of_day),4) AS total_intensity_ninth_decile
 FROM
   user_dow_summary ),
 basic_summary AS (
 SELECT
   part_of_week,
   day_of_week,
   time_of_day,
   SUM(total_intensity) AS total_total_intensity,
   AVG(total_intensity) AS average_total_intensity,
   SUM(total_average_intensity) AS total_total_average_intensity,
   AVG(total_average_intensity) AS average_total_average_intensity,
   SUM(average_intensity) AS total_average_intensity,
   AVG(average_intensity) AS average_average_intensity,
   AVG(max_intensity) AS average_max_intensity,
   AVG(min_intensity) AS average_min_intensity
 FROM
   user_dow_summary
 GROUP BY
   1,
   dow_number,
   2,
   3)
SELECT
 *
FROM
 basic_summary
LEFT JOIN
 intensity_deciles
USING
 (part_of_week,
   day_of_week,
   time_of_day)
ORDER BY
 1,
 dow_number,
 2,
 CASE
   WHEN time_of_day = "Morning" THEN 0
   WHEN time_of_day = "Afternoon" THEN 1
   WHEN time_of_day = "Evening" THEN 2
   WHEN time_of_day = "Night" THEN 3
END
 ;
